(defwidget v-box [?class ?halign ?space-evenly ?valign ?vexpand ?visible]
  (box
    :class {class}
    :halign {halign ?: "fill"}
    :valign {valign ?: "fill"}
    :orientation "v"
    :space-evenly {space-evenly ?: false}
    :vexpand {vexpand ?: false}
    :visible {visible ?: true}
    (children)
  )
)

(defwidget h-box [?class ?halign ?space-evenly ?valign ?vexpand ?visible]
  (box
    :class {class}
    :halign {halign ?: "fill"}
    :valign {valign ?: "fill"}
    :orientation "h"
    :space-evenly {space-evenly ?: false}
    :vexpand {vexpand ?: false}
    :visible {visible ?: true}
    (children)
  )
)

(deflisten color-scheme
  "eww-color-scheme")

(defwidget taskbar []
  (v-box :class "bar ${color-scheme}" :vexpand true
    (workspaces)
    (box :vexpand true)
    (music)
    (tray)
    (pies)
    (keymap)
    (time)
  )
)

(deflisten workspaces
  :initial "[]"
  "eww-hypr-workspaces")

(defwidget workspaces []
  (box :orientation "v" :class "workspaces" :space-evenly false
    (for workspace in workspaces
      (box :orientation "v" :class "workspace ${workspace.active ? "active" : ""}" :space-evenly false
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (label :class "name" :text "${workspace.name}")
        )
        (for window in {workspace.windows}
          (eventbox :onclick "hyprctl dispatch focuswindow address:${window.address}"
            (v-box :class "window ${window.active ? "active" : ""}"
              (image :class "icon" :image-width 64
                :visible {window.icon != "null"}
                :path {window.icon ?: "/home/nemo157/.local/share/eww/no-album.png"}
                :tooltip {window.title}
              )
              (label :class "class"
                :text "${window.class}"
                :visible {window.icon == "null"}
                :tooltip {window.title}
              )
            )
          )
        )
      )
    )
  )
)


(deflisten music-queue
  :initial '{"position":0,"length":0}'
  "eww-music-queue")

(deflisten music-status
  :initial '{"state":"stopped","position":0}'
  "eww-music-status")

(deflisten music-metadata
  :initial '{"artist":"","album":"","title":"","duration":1}'
  "eww-music-metadata")

(defwidget dynamic-label [class text]
  (label
    :class {class}
    :text {text}
    :visible {text != "null"}
    :wrap true
    :limit-width 50
    :justify "center")
)

(defwidget duration [?prefix value]
    (label :text "${prefix}${round(value / 60, 0)}:${strlength(round(value % 60, 0)) < 2 ? "0" : ""}${round(value % 60, 0)}")
)

(defwidget music []
  (v-box
    (v-box :class 'music ${music-status.state}'
      (dynamic-label :class "album" :text {music-metadata.album})
      (dynamic-label :class "artist" :text {music-metadata.artist})
      (eventbox :onclick "playerctl -p mpd play-pause" :cursor {music-status.state == "stopped" ?  "default" : "pointer"}
        (overlay
          (image :class "albumart" :image-width 89 :path {music-metadata.albumart ?: "/home/nemo157/.local/share/eww/no-album.png"})
          (label :class "play-button" :text "")
          (label :class "pause-button" :text "")
        )
      )
      (dynamic-label :class "title" :text {music-metadata.title})
      (v-box :visible {music-queue.position != 0}
        (label :class "queue" :text "${music-queue.position} of ${music-queue.length}")
        (progress :class "progress" :value {music-status.position / music-metadata.duration * 100})
        (h-box :class "time"
          (duration :value {music-status.position})
          (box :hexpand true)
          (duration :prefix "-" :value {music-metadata.duration - music-status.position})
        )
      )
      (eventbox :class "new-album" :onclick "rand-album" :cursor "pointer"
        (centerbox
          (label :text "󰀥")
          (label :text "󰒟")
          (label :text "󰀥")
        )
      )
    )
  )
)

(defwidget tray []
  (v-box :class "tray"
    (systray :pack-direction "ltr" :halign "center")
  )
)

(defvar GiB {1024 * 1024 * 1024})

(defwidget pie [value ?class tooltip icon ?clockwise ?visible]
  (circular-progress
      :tooltip {tooltip}
      :value {value}
      :class "pie v${round(value / 10, 0)}0 ${class}"
      :thickness 4
      :start-at 75
      :clockwise {clockwise ?: true}
      :visible {visible ?: true}
    (overlay
      (label :class "pie-overlay" :text "")
      (label :text {icon})
    )
  )
)

(defwidget data-pie [?class used total icon]
  (pie :class {class} :icon {icon}
    :value {used * 100 / total}
    :tooltip "${round(used / GiB, 1)} / ${round(total / GiB, 1)} GiB" 
  )
)

(defwidget pies []
  (h-box :class "pies" :halign "fill" :space-evenly true
    (data-pie :icon "M"
      :used {EWW_RAM.used_mem}
      :total {EWW_RAM.total_mem}
    )
    (pie :icon "C"
      :value {EWW_CPU.avg}
      :tooltip "${round(EWW_CPU.avg, 2)}"
    )
    (data-pie :icon "D"
      :used {EWW_DISK["/home"]?.used ?: EWW_DISK["/"]?.used}
      :total {EWW_DISK["/home"]?.total ?: EWW_DISK["/"]?.total}
    )
    (pie :icon "B" :class "inverse" :clockwise false
      :visible {EWW_BATTERY != ""}
      :value {EWW_BATTERY == "" ? 0 : EWW_BATTERY.total_avg}
      :tooltip "${round(EWW_BATTERY == "" ? 0 : EWW_BATTERY.total_avg, 1)}%"
    )
  )
)

(defpoll keymap
  :interval "1s"
  :initial "unknown"
  " \
    hyprctl devices -j \
    | jq -r '.keyboards[] | select(.main) | .active_keymap' \
    | sed 's/English (programmer Dvorak)/dvp/' \
    | sed 's/English (US)/qwerty/' \
  "
)

(defwidget keymap []
  (label :text {keymap})
)

(defwidget time []
  (v-box :class "clock"
    (h-box
      (label :text {formattime(EWW_TIME, "%Y")})
      (label :class "tertiary" :text "-")
      (label :text {formattime(EWW_TIME, "%m")})
      (label :class "tertiary" :text "-")
      (label :text {formattime(EWW_TIME, "%d")})
    )
    (h-box
      (label :text {formattime(EWW_TIME, "%H")})
      (label :class "tertiary" :markup {EWW_TIME % 2 == 1 ? ":" : " "})
      (label :text {formattime(EWW_TIME, "%M")})
      (label :class "tertiary" :text " ")
      (label :class "secondary" :text {formattime(EWW_TIME, "%z")})
    )
  )
)

(defwindow taskbar
  :monitor 0
  :exclusive true 
  :geometry (geometry :height "100%" :anchor "center left")
  (taskbar))
