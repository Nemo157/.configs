(defvar color-scheme "light")
(defwidget taskbar []
  (box :class "bar ${color-scheme}" :orientation "v" :space-evenly false :vexpand true
    (workspaces)
    (music)
    (tray)
    (pies)
    (time)
  )
)

(defwidget workspaces []
  (box :orientation "v" :class "workspaces" :vexpand true :space-evenly false
    (box :vexpand true)
    (label :text "TODO:")
    (label :text "workspaces")
    (box :vexpand true)
  )
)

(defpoll music :initial '{"queue":{"state":"stopped","position":0,"length":0}}' :interval "1s" `music-status`)

(defwidget dynamic-label [class text]
  (label
    :class {class}
    :text {text}
    :visible {text != "null"}
    :wrap true
    :justify "center")
)

(defwidget music []
  (box :orientation "v" :class 'music ${music.queue.state}' :space-evenly false
    (dynamic-label :class "album" :text {music?.current?.album})
    (dynamic-label :class "artist" :text {music?.current?.artist})
    (eventbox :onclick "mpc toggle" :cursor {music.queue.state == "stopped" ?  "default" : "pointer"}
      (overlay
        (image :class "albumart" :image-width 89 :path {music?.albumart ?: "/home/nemo157/.local/share/eww/no-album.png"})
        (label :class "play-button" :text "")
        (label :class "pause-button" :text "")
      )
    )
    (dynamic-label :class "title" :text {music?.current?.title})
    (box :orientation "v" :space-evenly false :visible {music.queue.position != 0}
      (label :class "queue" :text "${music.queue.position} of ${music.queue.length}")
      (progress :class "progress" :value {music?.time?.percent ?: 0})
      (box :orientation "h" :class "time" :space-evenly false
        (label :text "${music?.time?.current}")
        (box :hexpand true)
        (label :text "-${music?.time?.remaining}")
      )
    )
  )
)

(defwidget tray []
  (box :orientation "v" :class "tray"
    (label :text "TODO:")
    (label :text "tray")
  )
)

(defvar GiB {1024 * 1024 * 1024})

(defwidget pie [value class tooltip icon]
  (circular-progress
      :tooltip {tooltip}
      :value {value}
      :class "pie ${class}"
      :thickness 4
      :start-at 75
    (overlay
      (label :class "icon" :text "")
      (label :text {icon})
    )
  )
)

(defwidget data-pie [class used total icon]
  (pie :class {class} :icon {icon}
    :value {used * 100 / total}
    :tooltip "${round(used / GiB, 1)} / ${round(total / GiB, 1)} GiB" 
  )
)

(defwidget pies []
  (box :orientation "h" :class "pies" :halign "fill"
    (data-pie :class "mem" :icon "M"
      :used {EWW_RAM.used_mem}
      :total {EWW_RAM.total_mem}
    )
    (pie :class "cpu" :icon "C"
      :value {EWW_CPU.avg}
      :tooltip "${round(EWW_CPU.avg, 2)}"
    )
    (data-pie :class "disk" :icon "D"
      :used {EWW_DISK["/home"].used}
      :total {EWW_DISK["/home"].total}
    )
  )
)

(defwidget time []
  (box :orientation "v" :class "clock"
    (box :orientation "h" :space-evenly false
      (label :text {formattime(EWW_TIME, "%Y")})
      (label :class "tertiary" :text "-")
      (label :text {formattime(EWW_TIME, "%m")})
      (label :class "tertiary" :text "-")
      (label :text {formattime(EWW_TIME, "%d")})
    )
    (box :orientation "h" :space-evenly false
      (label :text {formattime(EWW_TIME, "%H")})
      (label :class "tertiary" :markup {EWW_TIME % 2 == 1 ? ":" : " "})
      (label :text {formattime(EWW_TIME, "%M")})
      (label :class "tertiary" :text " ")
      (label :class "secondary" :text {formattime(EWW_TIME, "%z")})
    )
  )
)

(defwindow taskbar
  :monitor 0
  :exclusive true 
  :geometry (geometry :height "100%" :anchor "center left")
  (taskbar))
